// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	storage "GYMBRO/internal/storage"

	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: _a0
func (_m *SessionRepository) CreateSession(_a0 *storage.WorkoutSession) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.WorkoutSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSession provides a mock function with given fields: _a0
func (_m *SessionRepository) DeleteSession(_a0 *string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSessions provides a mock function with given fields:
func (_m *SessionRepository) GetAllSessions() ([]*storage.WorkoutSession, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSessions")
	}

	var r0 []*storage.WorkoutSession
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*storage.WorkoutSession, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*storage.WorkoutSession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.WorkoutSession)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: _a0
func (_m *SessionRepository) GetSession(_a0 *string) (*storage.WorkoutSession, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *storage.WorkoutSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*storage.WorkoutSession, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*string) *storage.WorkoutSession); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.WorkoutSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSession provides a mock function with given fields: _a0, _a1
func (_m *SessionRepository) UpdateSession(_a0 *string, _a1 *storage.WorkoutSession) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *storage.WorkoutSession) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
