// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	storage "GYMBRO/internal/storage"

	mock "github.com/stretchr/testify/mock"
)

// WorkoutRepository is an autogenerated mock type for the WorkoutRepository type
type WorkoutRepository struct {
	mock.Mock
}

// AddRecord provides a mock function with given fields: record
func (_m *WorkoutRepository) AddRecord(record storage.Record) error {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for AddRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.Record) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWorkout provides a mock function with given fields: workout
func (_m *WorkoutRepository) CreateWorkout(workout storage.Workout) error {
	ret := _m.Called(workout)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.Workout) error); ok {
		r0 = rf(workout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndWorkout provides a mock function with given fields: workoutID
func (_m *WorkoutRepository) EndWorkout(workoutID string) error {
	ret := _m.Called(workoutID)

	if len(ret) == 0 {
		panic("no return value specified for EndWorkout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(workoutID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkoutRepository creates a new instance of WorkoutRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkoutRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkoutRepository {
	mock := &WorkoutRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
